** Hilt can provide dependencies to other Android classes that have the @AndroidEntryPoint annotation:
    Application	                                ApplicationComponent	            @Singleton
    View Model	                                ActivityRetainedComponent	        @ActivityRetainedScope
    Activity	                                ActivityComponent	                @ActivityScoped
    Fragment                                    FragmentComponent	                @FragmentScoped
    View	                                    ViewComponent	                    @ViewScoped
    View annotated with @WithFragmentBindings	ViewWithFragmentComponent	        @ViewScoped
    Service	                                    ServiceComponent	                @ServiceScoped

    Not : The anything that is activity retained scope cannot be injected into something that singleton scope. Anything
    that's activity scoped cannot be injected into activity retained scope.

    https://developer.android.com/training/dependency-injection/hilt-android#component-scopes

** That's one of the reason prefer Dagger/Hilt to KOIN : Dagger will check things at compile time. Not runtime.

** There are two problems for constructor injection :
    1. Constructor injection for interface instance
    2. Constructor injection for Third party library instance


** There are two options solving this problem : @Binds and @Provides

   - @Binds :

        @InstallIn(ActivityComponent::class) // You can change Activity, Fragment, vs component
        @Module
        abstract class MyModule {

            @ActivityScoped // When you used ApplicationComponent, you should use @Singleton (ActivityComponent -> @ActivityScoped)
            @Binds // simple way for interface constructor injection problem solution
            abstract fun bindSomeDependency(
                someImpl: SomeInterfaceImpl
            ): SomeInterface

            @ActivityScoped
            @Binds
            abstract fun bindGson(gson: Gson): Gson
        }

    - @Provides : // better way

        @InstallIn(ApplicationComponent::class) // You can change Activity, Fragment, vs component
        @Module
        class MyModule {
            @Singleton
            @Provides
            fun provideSomeString(): String {
                return "some string"
            }

            @Singleton
            @Provides
            fun provideSomeInterface(
                someString: String
            ): SomeInterface {
                return SomeInterfaceImpl(someString)
            }
        }

** Providing instances of the same type with HILT :

    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class Impl1

    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class Impl2